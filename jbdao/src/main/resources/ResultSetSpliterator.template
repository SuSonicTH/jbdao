
    private static class ResultSetSpliterator extends Spliterators.AbstractSpliterator<%CLASS%> implements AutoCloseable {
        private final PreparedStatement preparedStatement;
        private final ResultSet resultSet;

        ResultSetSpliterator(Connection connection, String sql, Object... args) throws SQLException {
            super(Long.MAX_VALUE, Spliterator.ORDERED);
            try {
                preparedStatement = connection.prepareStatement(sql);
                int i = 1;
                for (Object arg : args) {
                    preparedStatement.setObject(i++, arg);
                }

                resultSet = preparedStatement.executeQuery();
                resultSet.setFetchSize(1000);
            } catch (SQLException sqlException) {
                try {
                    close();
                } catch (SQLException ex) {
                    //intentionally left blank
                }
                throw new ResultSetSpliteratorException("Could not create ResultSetSpliterator", sqlException);
            }
        }

        @Override
        public boolean tryAdvance(Consumer<? super %CLASS%> action) {
            try {
                if (resultSet.next()) {
                    action.accept(new %CLASS%(resultSet));
                    return true;
                } else {
                    close();
                    return false;
                }
            } catch (SQLException e) {
                throw new ResultSetSpliteratorException("Could not advance to next record", e);
            }
        }

        public void close() throws SQLException {
            if (resultSet != null) {
                resultSet.close();
            }
            if (preparedStatement != null) {
                preparedStatement.close();
            }
        }

        public static class ResultSetSpliteratorException extends RuntimeException {
            public ResultSetSpliteratorException(String message, Throwable cause) {
                super(message, cause);
            }
        }
    }

